#!/usr/bin/env node
'use strict';

/**
 * Module dependencies.
 */

let app = require('./../app');
let debug = require('debug')('node:server');
let http = require('http');

/**
 * Create HTTP server.
 */
let server = http.createServer(app);

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

//Se establece un control de Cluster
let cluster = require('cluster');

//Queries whether the instance is Master or is a clone
if (cluster.isMaster) {
    //Clones are created
    //The CPU number of the machine is queried
    let numCPUs = require('os').cpus().length;
    console.log('Starting cluster with %s cluster ', numCPUs);

    //A clone is started by each of the machine cores
    for (let i = 0; i < numCPUs; i++) {
        let worker = cluster.fork();
        console.log('Cluster %s started', worker.process.pid);
    }
} else {
    //Starting a clone (fork)
    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
